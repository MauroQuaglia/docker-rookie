# https://docs.docker.com/compose/compose-file/
# https://github.com/compose-spec/compose-spec/blob/master/00-overview.md
# E' evidente che ci sono delle cache in giro quindi sempre meglio usare l'opzione --no-cache altrimenti ho notato che a volte non vede delle modifiche
# Tipo tolgo un file da una directory in un volume e lui continua a vederlo
# docker-compose up --build --no-cache -d

# IL buon pattern:
# docker-compose config
# docker-compose build --no-cache
# docker-compose up -d
# docker container exec -it qoturnix-7 /bin/bash
# docker compose down --remove-orphans
# https://docs.docker.com/compose/compose-file/compose-file-v3/
# docker container exec -it q-alpine-7 /bin/bash
version: '3.6' # docker-compose config
services:
  q-alpine:
    build:
      context: ../target-alpine
    container_name: q-alpine-7
    image: 'q-alpine-image-name'
    stdin_open: true
    secrets:
      - source: host_text
        target: /home/dockeruser/host_text
  postgres:
    image: postgres:13-alpine
    # Questi ci vogliono altrimenti il container muore subito. Almeno la password deve essere definita!
    environment:
      POSTGRES_USER: xpuser
      POSTGRES_PASSWORD: yourpassword
      POSTGRES_DB: kronos_development
    # In questo modo i dati vengono salvati dentro al container in questo path sempre dentro al container.
    # Posso anche non specificarlo se non mi interessa questo volume che tanto fa lui dai solo
    volumes:
      - /var/lib/postgresql/data
    expose:
      - 5432
  #q-debian:
  #  build:
  #    context: ../target-debian
  #  container_name: q-debian-7
  #  stdin_open: true
  qoturnix:
    build: # Fare sempre la prova del container per vedere se ha seguito le indicazioni del file .dockerignore.
      args:
        - UBUNTU=ubuntu@sha256:b060fffe8e1561c9c3e6dea6db487b900100fc26830b9ea2ec966c151ab4c020
      context: .
      target: staging # La costruzione della build senza BuildKit sembra non funzionare come ci si aspetta, tuttavia poi nel container ci sono le cose giuste.
    container_name: qoturnix-7 # Do un nome al container così che mi torna più comodo per: "docker container exec -it qoturnix-7 /bin/bash"
    image: 'qoturnix-image-name'
    environment: # vengono impostate queste variabili di ambiente nel container
      - PASSWORD=my-password # echo $PASSWORD
      - USERNAME=my-username # echo USERNAME
    working_dir: /data-staging-4
    entrypoint: '/bin/bash'
    #command: -c 'sleep infinity' # Questo comando verrebbe eseguito all'interno del container mantenendolo attivo. Tuttavia  si può mantenere il container attivo con l'opzione stdin_open: true.
    stdin_open: true #consente di inviare input da tastiera al processo all'interno del contenitore. Consente di non specificare il command sopra che infatti ho commentato
    ports:
      - '9090:9090' #host:container
    volumes: # https://github.com/compose-spec/compose-spec/blob/master/07-volumes.md
      # "bind-mount" da host-dir A container-dir.
      # Occhio che qui non c'è condivisione sullo Swarm, la directory è sul container.
      # Importante, il path dell'host deve essere assoluto o con il . per dire che è quello relativo alla directory corrente! Altrimenti non da errore ma non funziona...
      - ./log:/data-staging-3/
      # "volume" gestito in automatico da Docker.
      # Qui c'è condivisione sullo Swarm.
      # Importante, il volume deve poi essere definito con tra le entry principali del docker-compose (qoturnix-gemset:).
      - qoturnix-gemset:/data-staging-4/
    depends_on:
      - postgres
    extra_hosts: # aggiunge host al file /etc/hosts nel container
      - "somehost:162.242.195.82"
      - "otherhost:50.31.209.229"
      # Così che poi nel file /etc/hosts avremo
      # 162.242.195.82  somehost
      # 50.31.209.229   otherhost
volumes:
  qoturnix-gemset:

secrets:
  host_text:
    file: text-1.txt