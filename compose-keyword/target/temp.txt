FROM ruby:3.1.1-alpine AS base

RUN apk update -qq && apk add --no-cache build-base \
                      tzdata nano vim bash git curl supercronic \
                   && rm -rf /var/cache/apk/*

RUN apk update -qq && apk add postgresql13-client postgresql13-dev \
                   && rm -rf /var/cache/apk/*

ARG UID
ARG GID

ENV UID=${UID:-1000}
ENV GID=${GID:-1000}

RUN addgroup -g $GID dockeruser && \
    adduser -h /home/dockeruser -s /bin/bash \
            -u $UID -G dockeruser -S dockeruser

RUN mkdir -p /app && chown dockeruser:dockeruser /app

USER dockeruser

WORKDIR /app

COPY --chown=dockeruser:dockeruser Gemfile Gemfile.lock ./

RUN echo "PS1='\n┌─\e[1m \e[38;5;46m[Docker]\e[00m\$(echo -en \$DOCKER_PS1)\e[1m\e[38;5;178m Kronos Services App \e[00m\${debian_chroot:+(\$debian_chroot)}\[\033[01;31m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\n└─>\$ '" >> ~/.bashrc

FROM base AS development


FROM base AS production
ENV RAILS_ENV=production

RUN bundle config set --local without 'development,test' && \
    bundle install --jobs="$(nproc)"

COPY --chown=dockeruser:dockeruser . ./

RUN bundle exec rails tmp:create
RUN bundle exec rake assets:precompile

FROM production AS integration
ENV RAILS_ENV=development
RUN bundle config delete --local without && \
    bundle install --jobs="$(nproc)"


